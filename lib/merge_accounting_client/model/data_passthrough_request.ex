# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MergeAccountingClient.Model.DataPassthroughRequest do
  @moduledoc """
  # The DataPassthrough Object ### Description The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.  ### Usage Example Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
  """

  @derive [Poison.Encoder]
  defstruct [
    :method,
    :path,
    :base_url_override,
    :data,
    :multipart_form_data,
    :headers,
    :request_format,
    :normalize_response
  ]

  @type t :: %__MODULE__{
          :method => MethodEnum,
          :path => String.t(),
          :base_url_override => String.t() | nil,
          :data => String.t() | nil,
          :multipart_form_data =>
            [MergeAccountingClient.Model.MultipartFormFieldRequest.t()] | nil,
          :headers => %{optional(String.t()) => :any} | nil,
          :request_format => RequestFormatEnum | nil,
          :normalize_response => boolean() | nil
        }
end

defimpl Poison.Decoder, for: MergeAccountingClient.Model.DataPassthroughRequest do
  import MergeAccountingClient.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:method, :struct, MergeAccountingClient.Model.MethodEnum, options)
    |> deserialize(
      :multipart_form_data,
      :list,
      MergeAccountingClient.Model.MultipartFormFieldRequest,
      options
    )
    |> deserialize(
      :headers,
      :map,
      MergeAccountingClient.Model.RemoteData,
      Keyword.merge(options, as: :any)
    )
    |> deserialize(
      :request_format,
      :struct,
      MergeAccountingClient.Model.RequestFormatEnum,
      options
    )
  end
end
