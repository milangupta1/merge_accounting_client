# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MergeAccountingClient.Api.Passthrough do
  @moduledoc """
  API calls for all endpoints tagged `Passthrough`.
  """

  alias MergeAccountingClient.Connection
  import MergeAccountingClient.RequestBuilder

  @doc """
  Pull data from an endpoint not currently supported by Merge.

  ## Parameters

  - connection (MergeAccountingClient.Connection): Connection to server
  - authorization (String.t): Should include 'Bearer ' followed by your test/production API Key.
  - x_account_token (String.t): Token identifying the end user.
  - data_passthrough_request (DataPassthroughRequest):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, MergeAccountingClient.Model.RemoteResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec passthrough_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MergeAccountingClient.Model.DataPassthroughRequest.t(),
          keyword()
        ) :: {:ok, MergeAccountingClient.Model.RemoteResponse.t()} | {:error, Tesla.Env.t()}
  def passthrough_create(
        connection,
        authorization,
        x_account_token,
        data_passthrough_request,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/passthrough")
    |> add_param(:headers, :Authorization, authorization)
    |> add_param(:headers, :"X-Account-Token", x_account_token)
    |> add_param(:body, :body, data_passthrough_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %MergeAccountingClient.Model.RemoteResponse{}}
    ])
  end
end
